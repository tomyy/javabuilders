buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.1'
    }
}

wrapper {
    gradleVersion = '6.8.1'
    distributionType = "ALL"
}

import java.text.SimpleDateFormat
def globalVersion = new Version(version)

allprojects {

    repositories {
        mavenCentral()
        jcenter()
    }

    apply plugin: 'idea'

    configure(subprojects.findAll { new File(it.projectDir, 'src/main/java').directory }) {
        apply plugin: 'java'
    }

    version = globalVersion
    status = version.status

}

// standard setup for all Java project
subprojects {

    // deploy all Java projects into Bintray JCenter
    if (project.plugins.hasPlugin('java')) {

        // merge Java and YAML files together in one source folder
        sourceSets {
            main {
                resources {
                    srcDir 'src/main/java'
                }
            }
            test {
                resources {
                    srcDir 'src/test/java'
                }
            }
        }

        dependencies {
            // test support
            testCompile "org.slf4j:slf4j-simple:${slf4jVersion}"
            testCompile "junit:junit:4.12"
        }

        task sourceJar(type: Jar) {
            from sourceSets.main.allSource
            classifier = 'sources'
        }
        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

    }
}

// published projects configuration
configure([project(':core'), project(':swing:swing-core'),project(':swing:swing-glazedlists')]) {

    // publishing artifacts to Bintray JCenter
    configurations {
        published
    }

    // upload to JCenter
    artifacts {
        published sourceJar
        published javadocJar
    }

    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'maven'

    ext.publish = true
    bintray {
        // grab credentials from environment variables
        user = "$System.env.BINTRAY_USER"
        key = "$System.env.BINTRAY_API_KEY"

        configurations = ['published', 'archives']
        dryRun = false //Whether to run this as dry-run, without deploying
        publish = true //If version should be auto published after an upload
        pkg {
            repo = 'javabuilders'
            name = project.name
            desc = 'Maximum productivity with minimum code via declarative UIs for Java.'
            websiteUrl = 'https://github.com/jacek99/javabuilders'
            issueTrackerUrl = 'https://github.com/jacek99/javabuilders/issues'
            vcsUrl = 'https://github.com/jacek99/javabuilders'
            licenses = ['Apache-2.0']
            publicDownloadNumbers = true
        }
    }

}

class Version {
    String originalVersion
    String thisVersion
    String status
    Date buildTime

    Version(String versionValue) {
        buildTime = new Date()
        originalVersion = versionValue
        if (originalVersion.endsWith('-SNAPSHOT')) {
            status = 'integration'
            thisVersion = originalVersion.substring(0, originalVersion.length() - 'SNAPSHOT'.length()) + getTimestamp()
        } else {
            status = 'release'
            thisVersion = versionValue
        }
    }

    String getTimestamp() {
        // Convert local file timestamp to UTC
        def format = new SimpleDateFormat('yyyyMMddHHmmss')
        format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')));
        return format.format(buildTime)
    }

    String toString() {
        thisVersion
    }
}
